generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String?
  hasImage      Boolean        @default(false)
  imageUrl      String?
  messagesSent  Message[]      @relation("SentMessages")
  conversations Conversation[] @relation("UserConversations")
  guilds        Guild[]        @relation("GuildOwners")
  members       Member[]       @relation("UserMember")
  guildRequests GuildRequests[] @relation("GuildInvites")
}

model Friend {
  id         String  @id @default(uuid())
  status     String?
  fromUserId String
  toUserId   String
}

model Message {
  id      String @id @default(uuid())
  content String

  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
}

model Conversation {
  id String @id @default(uuid())

  messages Message[]
  users    User[]    @relation("UserConversations")

  createdAt DateTime @default(now())
}

model Guild {
  id   String @id @default(uuid())
  name String

  ownerId String
  owner   User   @relation("GuildOwners", fields: [ownerId], references: [id])

  members    Member[]     @relation("GuildMembers")
  categories Category[] @relation("GuildCategories")

  guildRequests GuildRequests[] @relation("GuildRequests")

  createdAt DateTime @default(now())
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

//model to check user permissions in a guild and save their messages in the guild
model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(MEMBER)

  userId String
  user   User   @relation("UserMember", fields: [userId], references: [id])

  guildId String
  guild   Guild  @relation("GuildMembers", fields: [guildId], references: [id], onDelete: Cascade)

  sentMessages ChannelMessages[] @relation("SentChannelMessages")
}

model GuildRequests {
  id      String @id @default(uuid())
  status   String

  toUserId String
  toUser   User @relation("GuildInvites", fields: [toUserId], references: [id])

  fromGuildId String
  fromGuild  Guild @relation("GuildRequests", fields: [fromGuildId], references: [id], onDelete: Cascade)
}

model Category {
  id   String @id @default(uuid())
  name String

  guildId String
  guild   Guild  @relation("GuildCategories", fields: [guildId], references: [id], onDelete: Cascade)

  channels TextChannel[] @relation("CategoryChannels")

  createdAt DateTime @default(now())
}

model TextChannel {
  id   String @id @default(uuid())
  name String
  topic String?

  categoryId String
  category   Category @relation("CategoryChannels", fields: [categoryId], references: [id], onDelete: Cascade)

  messages ChannelMessages[]

  createdAt DateTime @default(now())
}

model ChannelMessages {
  id      String @id @default(uuid())
  content String

  senderId String
  sender   Member @relation("SentChannelMessages", fields: [senderId], references: [id])

  channelId String
  channel   TextChannel @relation(fields: [channelId], references: [id])

  createdAt DateTime @default(now())
}
